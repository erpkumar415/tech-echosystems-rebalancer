-------------------------------------
Angular Version 6+
-------------------------------------
Full Stack developer 30-40 % in UI 
-------------------------------------

1. What is Angular ?

2. What is TypeScript ?

3. What is ES6 or ECMAScript ?
4. What is diff between  ES6 ,TypeScript, Javascript ?
5. How does an Angular application work?

6. How does an Angular application work?
Every Angular app consists of a file named angular.json. This file will contain all the configurations of the app. 
While building the app, the builder looks at this file to find the entry point of the application. 
Following is an image of the angular.json file:
"build": {
        "builder": "@angular-devkit/build-angular:browser",
        "options": {
          "outputPath": "dist/angular-starter",
          "index": "src/index.html",
          "main": "src/main.ts",
          "polyfills": "src/polyfills.ts",
          "tsConfig": "tsconfig.app.json",
          "aot": false,
          "assets": [
            "src/favicon.ico",
            "src/assets"
          ],
          "styles": [
            "./node_modules/@angular/material/prebuilt-themes/deeppurple-amber.css",
            "src/style.css"
          ]
        }
      }

Inside the build section, the main property of the options object defines the entry point of the application which in this case is main.ts.
The main.ts file creates a browser environment for the application to run, and, along with this, it also calls a function called bootstrapModule, 
which bootstraps the application. 
These two steps are performed in the following order inside the main.ts file:
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

platformBrowserDynamic().bootstrapModule(AppModule)
In the above line of code, AppModule is getting bootstrapped.
The AppModule is declared in the app.module.ts file. This module contains declarations of all the components.
Below is an example of app.module.ts file:
   
      import { BrowserModule } from '@angular/platform-browser';
      import { NgModule } from '@angular/core';
      import { AppComponent } from './app.component';

      @NgModule({
        declarations: [
          AppComponent
        ],
        imports: [
          BrowserModule
        ],
        providers: [],
        entryComponents: [],
        bootstrap: [AppComponent]
      })
      export class AppModule { }
	  
As one can see in the above file, AppComponent is getting bootstrapped.
This component is defined in app.component.ts file. This file interacts with the webpage and serves data to it.
Below is an example of app.component.ts file:

    
      import { Component } from '@angular/core';

      @Component({
        selector: 'app-root',
        templateUrl: './app.component.html',
        styleUrls: ['./app.component.css']
      })
      export class AppComponent {
        title = 'angular';
      }
Each component is declared with three properties:
1. Selector - used for accessing the component
2. Template/TemplateURL - contains HTML of the component
3. StylesURL - contains component-specific stylesheets

After this, Angular calls the index.html file. This file consequently calls the root component that is app-root. 
The root component is defined in app.component.ts.
This is how the index.html file looks:
    
      <!doctype html>
      <html lang="en">
      <head>
        <meta charset="utf-8">
        <title>Angular</title>
        <base href="/">
        <meta name="viewport" content="width=device-width, initial-scale=1">
      </head>
      <body>
        <app-root></app-root>
      </body>
      </html>
    
  
The HTML template of the root component is displayed inside the <app-root> tags.

This is how every angular application works.	  


7. What is AOT compilation? What are the advantages of AOT?

Every Angular application consists of components and templates which the browser cannot understand. 
Therefore, all the Angular applications need to be compiled first before running inside the browser.

Angular provides two types of compilation:
1.JIT(Just-in-Time) compilation: 
Development->Production->App DownLoaded in Browser->Angular Parse & Compile Template to Javascripts
2.AOT(Ahead-of-Time) compilation:
Development-->Angular Parse & Compile Template to Javascripts->Production->App DownLoaded in Browser

In JIT compilation, the application compiles inside the browser during runtime.
Whereas in the AOT compilation, the application compiles during the build time.

By default, angular builds and serves the application using JIT compiler:

ng build
ng serve

For using AOT compiler following changes should be made:

ng build --aot
ng serve --aot

8.Explain Components, Modules and Services in Angular ?
   create an Angular application by running the following inside the command terminal:

   ng new angularApp
   
   Components
In Angular, components are the basic building blocks, which control a part of the UI for any application.
A component is defined using the @Component decorator. Every component consists of three parts, the template which loads the view for the component, a stylesheet which defines the look and feel for the component, and a class that contains the business logic for the component.
For creating a component, inside the command terminal, navigate to the directory of the application created, and run the following command:

ng generate component test
or
ng g c test

Modules
A module is a place where we can group components, directives, services, and pipes. Module decides whether the components, directives, etc can be used by other modules, by exporting or hiding these elements. Every module is defined with a @NgModule decorator.
By default, modules are of two types:

-1.Root Module
-2.Feature Module
Every application can have only one root module whereas, it can have one or more feature modules.
A root module imports BrowserModule, whereas a feature module imports CommonModule.

cmd :
ng g m test-module


Services Services are objects which get instantiated only once during the lifetime of an application. The main objective of a service is to share data, functions with different components of an Angular application.
A service is defined using a @Injectable decorator. A function defined inside a service can be invoked from any component or directive.

To create a service, run the following command:

ng g s test-service

9. What are lifecycle hooks in Angular? Explain a few lifecycle hooks.
Every component in Angular has a lifecycle, different phases it goes through from the time 
of creation to the time it's destroyed. 
Angular provides hooks to tap into these phases and trigger changes at specific phases in a lifecycle.


ngOnChanges( ) This hook/method is called before ngOnInit and whenever one or more input properties of the component changes.
This method/hook receives a SimpleChanges object which contains the previous and current values of the property.

ngOnInit( ) This hook gets called once, after the ngOnChanges hook.
It initializes the component and sets the input properties of the component.

ngDoCheck( ) It gets called after ngOnChanges and ngOnInit and is used to detect and act on changes that cannot be detected by Angular.
We can implement our change detection algorithm in this hook. ngAfterContentInit( ) It gets called after the first ngDoCheck hook. This hook responds after the content gets projected inside the component.

ngAfterContentChecked( ) It gets called after ngAfterContentInit and every subsequent ngDoCheck. It responds after the projected content is checked.

ngAfterViewInit( ) It responds after a component's view, or a child component's view is initialized.

ngAfterViewChecked( ) It gets called after ngAfterViewInit, and it responds after the component's view, or the child component's view is checked.

ngOnDestroy( ) It gets called just before Angular destroys the component. This hook can be used to clean up the code and detach event handlers.

10. Explain string interpolation and property binding in Angular?

String interpolation and property binding are parts of data-binding in Angular.
Data-binding is a feature in angular, which provides a way to communicate between the component(Model) and its view(HTML template).
Data-binding can be done in two ways, one-way binding and two-way binding.
In Angular, data from the component can be inserted inside the HTML template. 
In one-way binding, any changes in the component will directly reflect inside the HTML template but, 
vice-versa is not possible. Whereas, it is possible in two-way binding.

String interpolation and property binding allow only one-way data binding.
String interpolation uses the double curly braces {{ }} to display data from the component.
 Angular automatically runs the expression written inside the curly braces, for example, {{ 2 + 2 }} will be evaluated 
 by Angular and the output 4, will be displayed inside the HTML template. Using property binding, 
 we can bind the DOM properties of an HTML element to a component's property. Property binding uses the square brackets [ ] syntax.


 
11. How are observables different from promises?

The first difference is that an Observable is lazy whereas a Promise is eager.
Means on Observable runs only when someone subscribes to them hence, the message “Before subscribing…” 
is displayed ahead of the message inside the observable.

Promise								| 	Observable
Emits a single value				|  Emits multiple values over a period of time
Not Lazy                    		|  Lazy. An observable is not called until we subscribe to the observable
Cannot be cancelled         		|  Can be cancelled by using the unsubscribe() method
									|  Observable provides operators like map, forEach, filter, reduce, retry, retryWhen etc.
Wait/Async can be apply on Call     |  Not possible for waiting on call

-----------------------------------------------
	const observable = rxjs.Observable.create(observer => {
        console.log('Text inside an observable');
        observer.next('Hello world!');
        observer.complete();
      });

      console.log('Before subscribing an Observable');

      observable.subscribe((message)=> console.log(message));
	  
	  When you run the above Observable, you can see messages being displayed in the following order:
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Before subscribing an Observable
Text inside an observable
Hello world!
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As you can see, observables are lazy. Observable runs only when someone subscribes to them hence,
 the message “Before subscribing…” is displayed ahead of the message inside the observable.
--------------------------------------------
	  const promise = new Promise((resolve, reject) => {
        console.log('Text inside promise');
        resolve('Hello world!');
      });

      console.log('Before calling then method on Promise');

      greetingPoster.then(message => console.log(message));
Running the above promise, the messages will be displayed in the following order:
>>>>>>>>>>>>>>>>>>
Text inside promise
Before calling then method on Promise
Hello world!

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
As you can see the message inside Promise is displayed first. 
This means that a promise runs before the then method is called. Therefore, promises are eager.
---------------------------------------------------

The next difference is that Observables can emit multiple values whereas Promises can emit only one value.

The biggest feature of using observables is the use of operators. 
We can use multiple operators on an observable whereas, there is no such feature in a promise.

	
	
12. What are directives in Angular?

A directive is a class in Angular that is declared with a @Directive decorator.
Every directive has its own behaviour and can be imported into various components of an application.

When to use a directive?
Consider an application, where multiple components need to have similar functionalities. 
The norm thing to do is by adding this functionality individually to every component but, 
this task is tedious to perform. In such a situation, one can create a directive having the
 required functionality and then, import the directive to components which require this functionality.
 
 Types of directives
Component directives
These form the main class in directives. Instead of @Directive decorator we use @Component decorator to declare these directives. These directives have a view, a stylesheet and a selector property.

Structural directives
These directives are generally used to manipulate DOM elements.
Every structural directive has a ‘ * ’ sign before them.
We can apply these directives to any DOM element.

In the above example, we can *ngIf and *ngFor directives being used.

*ngIf is used to check a boolean value and if it’s truthy,the div element will be displayed.

*ngFor is used to iterate over a list and display each item of the list.

Attribute Directives

These directives are used to change the look and behaviour of a DOM element. 
Let’s understand attribute directives by creating one:


How to create a custom directive?

We’re going to create an attribute directive:

In the command terminal, navigate to the directory of the angular app and type the following command to generate a directive:

ng g directive blueBackground

The following directive will be generated. Manipulate the directive to look like this:

    
      import { Directive, ElementRef } from '@angular/core';

      @Directive({
       selector: '[appBlueBackground]'
      })
      export class BlueBackgroundDirective {
       constructor(el:ElementRef) {
         el.nativeElement.style.backgroundColor = "blue";
       }
      }
    
  
Now we can apply the above directive to any DOM element:

    
      <p appBlueBackground>Hello World!</p>
 
 
13. How does one share data between components in Angular?
A . Using Routing from one component to other  component
B--->Parent/ child  design flow:

1.Parent to child using @Input decorator

2.
Child to parent using @Output and EventEmitter

3.Child to parent using @ViewChild decorator:

 Child component---->:
    
      import {Component} from '@angular/core';

      @Component({
        selector: 'app-child',
        template:`
          <p>{{data}}</p>
        `,
        styleUrls: ['./child.component.css']
      })
      export class ChildComponent {
        data:string = "Message from child to parent";
        constructor() { }
      }
	  
	  

Parent Component------------->:

    
      import { Component,ViewChild, AfterViewInit} from '@angular/core';
      import { ChildComponent } from './../child/child.component';

      @Component({
        selector: 'app-parent',
        template: `
          <p>{{dataFromChild}}</p>
        ` ,
        styleUrls: ['./parent.component.css']
      })
      export class ParentComponent implements AfterViewInit {
        dataFromChild: string;
        @ViewChild(ChildComponent,{static:false}) child;

        ngAfterViewInit(){
          this.dataFromChild = this.child.data;
        }
        constructor() { }
      }
	In the above example, a property named “data” is passed from the child component to the parent component.
@ViewChild decorator is used to reference the child component as “child” property.
Using the ngAfterViewInit hook, we assign the child’s data property to the messageFromChild property 
and use it in the parent component’s template.
  
	 ----------
14. Explain the concept of Dependency Injection?
Dependency injection is an application design pattern which is implemented by Angular.
It also forms one of the core concepts of Angular.

So what is dependency injection in simple terms?
Let’s break it down, dependencies in angular are nothing but services which have a functionality. Functionality of a service, can be needed by various components and directives in an application. Angular provides a smooth mechanism by which we can inject these dependencies in our components and directives.
So basically, we are just making dependencies which are injectable across all components of an application.	

15. How to make module as lazy Loading?

16. How to make shared module ?

17. What is Differance between CanActivate and CanActivate  ? And when to use them?

18.What is resolver in angular ? why it used?

19.What is Differance between resolver and CanActivate and CanActivate  ?

20. What is Interceptor in angular ? why it used?

21. What is Differance between Interceptor and resolver and CanActivate and CanActivate  ? And when to use them?


22. How to push data on Post method REST API ?

22. How to Get data on Get method REST API ?

23. How to Get data on Get method REST API for non Json type response ?

24. How to check any input is String or Object or Array ?

25. How to create MAP ,Set and List in angular?

26. How to create select and button input  in angular?

26. What is pipe in angular ? why it used?

27. How is popup in angular ?  

28.What is Differance between ng-bootstrap and primeng ?

28.What is amCharts  in angular ?
   
amCharts used for responsive graph -Map, XY graph,Pie,Venn Diagram
https://www.amcharts.com/docs/v4/getting-started/
  

29.What is primeng  in angular ?
PrimeNG :PrimeNG is a rich set of open source native Angular UI components.
PrimeNG Components used for responsive -widget like Button.grid,table,menu,Popup etc.
More:https://primefaces.org/primeng/showcase/#/setup





