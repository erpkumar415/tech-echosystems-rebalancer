		
// JAVA Code for Find maximum (or minimum)
// sum of a subarray of size k
import java.util.*;

class GFG {
	
	// Returns maximum sum in a subarray of size k.
	public static int maxSum(int arr[], int n, int k)
	{
		// k must be greater
		if (n < k)
		{
		System.out.println("Invalid");
		return -1;
		}
	
		// Compute sum of first window of size k
		int res = 0;
		for (int i=0; i<k; i++)
		res += arr[i];
	
		// Compute sums of remaining windows by
		// removing first element of previous
		// window and adding last element of
		// current window.
		int curr_sum = res;
		for (int i=k; i<n; i++)
		{
		curr_sum += arr[i] - arr[i-k];
		res = Math.max(res, curr_sum);
		}
	
		return res;
	}
	
	/* Driver program to test above function */
	public static void main(String[] args)
	{
		int arr[] = {1, 4, 2, 10, 2, 3, 1, 0, 20};
		int k = 4;
		int n = arr.length;
		System.out.println(maxSum(arr, n, k));
	}
}
// This code is contributed by Arnav Kr. Mandal.

-------------------------------------------------------------------------



-------------------------------------------------------------------
 int []rowsMatrix={0,0,1,1,1,1,0,0,0};
        int windowSize=3;
        int i=0,j=0;
        int countOne=0;
		int res = 0;
		
		
        while(j<rowsMatrix.length){          
			
            if(j-i+1<windowSize){
			 res += arr[j];
                j++;
            }else if(j-i+1==windowSize){
               arr[j]
                i=i+1;
                j=j+1;
            }
            
            
            
        }
		
		-------------------------------------------------------
		
		// Returns maximum sum in a subarray of size k.
	public static int maxSumNewApp(int arr[], int n, int k)
	{
		// k must be greater
		if (n < k)
		{
		System.out.println("Invalid");
		return -1;
		}
	
		// Compute sum of first window of size k
		int res = 0;
		for (int i=0; i<k; i++)
		res += arr[i];
	
		// Compute sums of remaining windows by
		// removing first element of previous
		// window and adding last element of
		// current window.
		int curr_sum = res;
		for (int i=k; i<n; i++)
		{
		curr_sum += arr[i] - arr[i-k];
		res = Math.max(res, curr_sum);
		}
	
		return res;
	}
	
	-------------------------------------
	
	
	var maxSubarray = function(arr,k){
  let max = 0;
  let windowSum = 0;
  let windowStart=0;
  for(let windowEnd=0;windowEnd<arr.length;windowEnd++){
      windowSum+=arr[windowEnd];
      if(windowEnd>=k-1){
        max = Math.max(windowSum,max);
        windowSum -= arr[windowStart];
        windowStart++;
      }
      console.log(windowSum,max);
  }
  return max;
};

-------------------------------------------------------