1. run kafka cluster:
docker-compose -f kafka-cluserdocker-compose.yml up -d [for background service run]
docker-compose -f kafkaMultiNodeCluster-docker-compose.yml up -d

docker-compose -f kafkaNodesCluster.yml up -d


Stop all service:
docker-compose -f kafkaMultiNodeCluster-docker-compose.yml down
--->All type containers
docker ps --all
-->go to shell 
docker exec -it <containerID> bash 
-->see active runig containers
docker container ls


2.
To Verify Log for service:

docker logs <service_container_id>

3. KAFKA_ADVERTISED_LISTENERS vs KAFKA_LISTENERS
KAFKA_ADVERTISED_LISTENERS: ---Address given Kafka broker in cluster where any client [kafka producer/consumer] coonect 
from out side kafka cluster

example--
KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://server_hostname:9095

Here server_hostname stand for hostname machine where Kafka node / service Installed.

More check-> KAFKA_LISTENERS
KAFKA_LISTENERS is what the broker will use to create server sockets.

KAFKA_ADVERTISED_LISTENERS is what clients will use to connect to the brokers. or Listeners to publish to ZooKeeper for clients to use,


In IaaS environments, this may need to be different from the interface to which the broker binds. If this is not set, the value for KAFKA_LISTENERS will be used.

4.  bootstrap-server  :Used to object to hold list of Broker_IP:Port while client connect to Kafka Server. Broker_IP is not KAFKA_ADVERTISED_LISTENERS Address details .


5. Replication Factior : No of copy of Topic Partition for backup in cluster. 
If replication factor is 3 then no of copy for given partition are 3 [one  partition which 
act as leader and remaining  other two are followers].The  two are followers gets always in sync with leader with technic in

Default Replication Factior is 3 if don't pass it in param


------------------------------------------------------------------------------------------------------------------------

zookeeper:

docker exec -it zookeeper ls opt/bitnami/zookeeper/conf/


docker exec -it zookeeper bash

opt/bitnami/zookeeper/bin/zookeeper-server-start.sh opt/bitnami/zookeeper/conf/zoo.cfg

KAFKA :
Node -2 
docker exec -it kafka_node2 bash

opt/bitnami/kafka/bin/zookeeper-shell.sh zookeeper:2181 ls /brokers/ids 
or directly 
docker exec -it kafka_node2  opt/bitnami/kafka/bin/zookeeper-shell.sh zookeeper:2181 ls /brokers/ids 

start kafka server 
opt/bitnami/kafka/bin/kafka-server-start.sh opt/bitnami/kafka/config/server.properties> /dev/null 2>&1 &   
 
 Node -1
kafka_node1
 
 docker exec -it kafka_node1 bash

opt/bitnami/kafka/bin/zookeeper-shell.sh zookeeper:2181 ls /brokers/ids 
or directly 
docker exec -it kafka_node1  opt/bitnami/kafka/bin/zookeeper-shell.sh zookeeper:2181 ls /brokers/ids 

start kafka server 
opt/bitnami/kafka/bin/kafka-server-start.sh opt/bitnami/kafka/config/server.properties> /dev/null 2>&1 &   
 
 or directly 
docker exec -it kafka_node1 opt/bitnami/kafka/bin/kafka-server-start.sh opt/bitnami/kafka/config/server.properties> /dev/null 2>&1 & 



 
kafka topics creation :
docker exec -it kafka_node1 opt/bitnami/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 5 --topic testpanku 

docker exec -it kafka_node2 opt/bitnami/kafka/bin/kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 2 --partitions 5 --topic indirapuramMessanger 

opt/bitnami/kafka/bin/zookeeper-shell.sh 192.168.1.5:2181 ls /brokers/ids

opt/bitnami/kafka/bin/zookeeper-shell.sh zookeeper:2181 ls /brokers/ids

kafka-topics.sh --create --zookeeper 192.168.1.5:2181 --replication-factor 2 --partitions 2 --topic honeywow
list topic
kafka-topics.sh  --list --zookeeper 192.168.1.5:2181

 # Describe a topic
  # kafka-topics.sh  --describe --topic my-topic --zookeeper zookeeper:2181
  
  kafka-topics.sh  --describe --topic honeywow --zookeeper 192.168.1.5:2181
  
docker exec -it kafka_node1 bash
  # Creating Producers
  # kafka-console-producer.sh --bootstrap-server localhost:9092 --topic my-topic
kafka-console-producer.sh --bootstrap-server 192.168.1.5:9010 --topic honeywow
  
  docker exec -it kafka_node1 bash
  # Creating Consumers
  # kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-topic --from-beginning

  kafka-console-consumer.sh --bootstrap-server 192.168.1.5:9010 --topic honeywow --from-beginning
   

zookeeper


list the topics-->
Now you can list the topics. Again kafka-topics.sh. The first option is the list option, then the zookeeper coordinates.

docker exec -it kafka_node2 opt/bitnami/kafka/bin/kafka-topics.sh --list --zookeeper zookeeper:2181
or in kafka node shell
opt/bitnami/kafka/bin/kafka-topics.sh --list --zookeeper zookeeper:2181

--->Kafka Clientts :
docker exec -it kafka_node1 bash

Now, since we have a topic, let’s start a console producer and send some messages. 
We will use kafka-console-producer, give at least one broker IP and port, then the topic name to which we want to send the messages.
  # Creating Producers
  # kafka-console-producer.sh --bootstrap-server localhost:9092 --topic my-topic
kafka-console-producer.sh --bootstrap-server 192.168.1.5:9010 --topic honeywow
  

kafka-console-producer.sh --broker-list localhost:1980 --topic india



Start a console consumer and check the messages that we sent from the producer. 
We will use kafka-console-consumer.sh, at least one broker coordinate to bootstrap the consumer, the topic name and the offset from where we want to start reading the messages. This is the first time I am reading it, so let’s start from the beginning.


kafka-topics  --list --zookeeper zookeeperdev:2181

  docker exec -it kafka_node1 bash
  # Creating Consumers
  # kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-topic --from-beginning

  kafka-console-consumer.sh --bootstrap-server 192.168.1.5:9010 --topic honeywow --from-beginning















Helps:
Kafka Clusters help:-
https://github.com/wurstmeister/kafka-docker/wiki/Connectivity
https://www.codetd.com/en/article/12756356
https://blog.csdn.net/noaman_wgs/article/details/103672808
https://github.com/quickbooks2018/aws/blob/master/Kafka/kafka%20in%20docker/docker-compose/bitnami-docker-compose.yaml

------
https://dzone.com/articles/running-apache-kafka-on-windows-os

https://gist.github.com/shabbirdwd53/d3b531d61379068da26d16487e37af34

http://selftuts.com/kafaka-setup-using-docker-compose/

https://www.learningjournal.guru/article/kafka/installing-multi-node-kafka-cluster/


https://zablo.net/blog/post/setup-apache-kafka-in-docker-on-windows/




https://itnext.io/how-to-install-kafka-using-docker-a2b7c746cbdc


